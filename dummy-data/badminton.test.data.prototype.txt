// $posts = $wpdb->get_results("SELECT * FROM $wpdb->postmeta
// WHERE meta_key = 'cp_annonceur' AND  meta_value = 'professionnel' LIMIT 1", ARRAY_A);

// $posts = $wpdb->get_results("SELECT * FROM $wpdb->postmeta
// WHERE meta_key = 'sp_player' AND meta_key='Pseudo' and meta_value = '$player_token' LIMIT 1", ARRAY_A);


// $cc_args = array(
//     'posts_per_page'   => -1,
//     'post_type'        => 'post',
//     'meta_key'         => 'cp_annonceur',
//     'meta_value'       => 'professionnel'
// );
// $cc_query = new WP_Query( $cc_args );

// the 'color' is 'blue' AND the 'price' is more than 1000 and less than 2000 and is enabled for Home page also
// $cc_args = array(
// 	'meta_query' => array(
// 	  'posts_per_page' => 10,
// 	  'post_type'      => 'product',
// 		'relation' => 'AND',
// 		array(
// 			'key' => 'diplay_on_homepage',
// 			'value' => 'true'
// 		),
// 		array(
// 			'relation' => 'AND',
// 			array(
// 				'key' => 'color',
// 				'value' => 'blue'
// 			),
// 			array(
// 				'key' => 'price',
// 				'value' => array( 1000, 2000 ),
// 				'type' => 'numeric',
// 				'compare' => 'BETWEEN'
// 			)
// 		)
// 	)
// );
 
// $cc_query = new WP_Query( $cc_args );
// the product is on sale and enabled for showing on home page
// $cc_args = array(
// 	'posts_per_page' => 10,
// 	'post_type'      => 'product',
// 	'meta_query' => array(
// 		'relation' => 'AND',
// 		array(
// 			'key' => 'diplay_on_homepage',
// 			'value' => 'true'
// 		),
// 		array(
//                         'key'   => 'on_sale',
// 			'value' => 'true'
// 		),
// 		array(
//                         'key'   => 'is_available',
// 			'value' => 'yes'
// 		),
// 	)
// );
// $cc_query = new WP_Query( $cc_args );
// the product price is 1000 and more
// $cc_args = array(
// 	'posts_per_page' => 10,
// 	'post_type'      => 'product',
// 	'meta_query' => array(
// 		array(
// 			'key' => 'price',
// 			'value' => 1000,
// 			'type' => 'numeric',
// 			'compare' => '>='
// 		)
// 	)
// );
 
// $cc_query = new WP_Query( $cc_args );
<?php

   $args = array('cat' => 4);
   $category_posts = new WP_Query($args);

   if($category_posts->have_posts()) : 
      while($category_posts->have_posts()) : 
         $category_posts->the_post();
?>

         <h1><?php the_title() ?></h1>
         <div class='post-content'><?php the_content() ?></div>      

<?php
      endwhile;
   else: 
?>

      Oops, there are no posts.

<?php
   endif;
?>

0. players of al genders, grades
1. foreach event/comp: random date + season(date) + league + venue + format
2. section
3. teams: unique players(section), 
4. foreach match: grade, points

for ($s = '', $i = 0, $z = strlen($a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')-1; $i != 32; $x = mt_rand(0,$z), $s .= $a{$x}, $i++); 

array_rand(array('MD', 'WD', 'XD'), 1);
array_rand(array('M', 'W'), 1)

function makeRandomDateInclusive($startDate,$endDate){
    $days = round((strtotime($endDate) - strtotime($startDate)) / (60 * 60 * 24));
    $n = rand(0,$days);
    return date("Y-m-d",strtotime("$startDate + $n days"));
}

makeRandomDateInclusive('2009-04-01','2009-04-03');
function randome_name($gender){
	return $gender=='M' ? 'Jack' : 'Ann';
}

function randome_surname(){
	return 'Smith';
}

//$all_players = array(
//'1231212' => array('firstname' => '', 'lastname' => '', gender => '', grade => '')
);
for($i=0; $i < 100; i++):
	$gender = array_rand(array('M', 'F'), 1);
	$all_players[i] = array(
		'firstname' => randome_name($gender),
		'lastname' => randome_surname(),
		'gender' => $gender,
		'grade' => $grade
	);
endfor;

$search_result = array_intersect_key($all_players, array(array("gender" => "M", "grade" => "2")));

$annual_events = array(
array(
	'title'=>'St Valentines', 
	'date'=>'', 
	'league'=>'Bonanza', 
	'venue'=>'Baldoyle', 
	'formatPoints' => '21',
	'grades'=>array(2,3,4,5,6,7,8,9),
	'sections'=>array('XD')),
//more
);
$all_players = array(
'000001' => array('name' => 'AN AL', 'firstname' => 'AN', 'lastname' => 'AL', gender' => 'M', 'grade' => '2', 'rl' => 'R'),
);
$teams_in_alltimes = array();
$seasons = array('2016', '2017', '2018');
foreach $season in $seasons:

$teams_in_season = array();
foreach $event in $annual_events:
	$teams_in_event = array();
	foreach $section in $event['sections']:
		$excluded = array();
		foreach($grade in $event['grades'])
			if($section == 'XD'):
				$pa = find_player('M', $grade, $excluded);
				array_push($excluded, $pa);
				$pb = find_player('F', $grade, $excluded);
				array_push($excluded, $pb);
				$team_x = $pa['name']. '|' .$pb['name'];

				$pc = find_player('M', $grade, $excluded);
				array_push($excluded, $pc);
				$pd = find_player('F', $grade, $excluded);
				array_push($excluded, $pd);
				$team_y = $pc['name']. '|' .$pd['name'];

			elseif($section == 'MD'):
				die();//tbd
			elseif($section == 'WD'):
				die();//tbd
			endif;

			array_push($teams_in_event, array($team_x => array_merge($pa, $pb));
			array_push($teams_in_event, array($team_y => array_merge($pc, $pd));
		endforeach;	
	endforeach;	
	array_push($teams_in_season, $teams_in_event);
endforeach;
	array_push($teams_in_alltimes, $teams_in_season);
endforeach;

$two_teams = array(
A|B => array(
	'A' => array('gender' => 'M', 'grade' => '2', 'rl' => 'R', 'BI' => '123321'),
	'B' => array('gender' => 'M', 'grade' => '2', 'rl' => 'R', 'BI' => '123321'),
),
C|D => array(
	'C' => array('gender' => 'M', 'grade' => '2', 'rl' => 'R', 'BI' => '123321'),
	'D' => array('gender' => 'M', 'grade' => '2', 'rl' => 'R', 'BI' => '123321'),
)
);


function random_game_points($outcomeA, $expect, $max){
	return $outcomeA == $expect ? $max : mt_rand(0,$max - 1);
}
//1 g/m 15 top
	$outcomeA = mt_rand(0,1);
	$max = 15;
	$gap['A'] = random_game_points($outcomeA, 1, $max); //$outcomeA == 1 ? 15 : mt_rand(0,14);
	$gap['B'] = random_game_points($outcomeA, 0, $max); //$outcomeA == 0 ? 15 : mt_rand(0,14);

//2 g/m 15 top
	$outcomeA = mt_rand(0,2);
	$max = 15;
	if($outcomeA == 2): //draw
		$gap['A'] = random_game_points($outcomeA, 1, $max);
		$gap['B'] = random_game_points($outcomeA, 0, $max);
		$gbp['A'] = random_game_points($outcomeA, 0, $max);
		$gbp['B'] = random_game_points($outcomeA, 1, $max);
	else:
		$gap['A'] = $outcomeA == 1 ? 15 : mt_rand(0,14);
		$gap['B'] = $outcomeA == 0 ? 15 : mt_rand(0,14);
		$gbp['A'] = $outcomeA == 1 ? 15 : mt_rand(0,14);
		$gbp['B'] = $outcomeA == 0 ? 15 : mt_rand(0,14);
	endif;

//3 g/m
	$outcomeA = mt_rand(0,1);
	$max = 15;
	$gap['A'] = random_game_points($outcomeA, 1, $max);
	$gap['B'] = random_game_points($outcomeA, 0, $max);
	$gbp['A'] = random_game_points($outcomeA, 0, $max);
	$gbp['B'] = random_game_points($outcomeA, 1, $max);
	$gcp['A'] = random_game_points($outcomeA, 1, $max);
	$gcp['B'] = random_game_points($outcomeA, 0, $max);

//5 b/m win: 3-0, 3-1, 3-2
	$max = 11;
	$outcomeA = mt_rand(0,1);
	$win_pattern = mt_rand(0,2);
	if ($win_pattern == 0)://3-0
		$gap['A'] = random_game_points($outcomeA, 1, $max);
		$gap['B'] = random_game_points($outcomeA, 0, $max);
		$gbp['A'] = random_game_points($outcomeA, 1, $max);
		$gbp['B'] = random_game_points($outcomeA, 0, $max);
		$gcp['A'] = random_game_points($outcomeA, 1, $max);
		$gcp['B'] = random_game_points($outcomeA, 0, $max);
	elseif ($win_pattern == 1)://3-1
		$gap['A'] = random_game_points($outcomeA, 1, $max);
		$gap['B'] = random_game_points($outcomeA, 0, $max);
		$gbp['A'] = random_game_points($outcomeA, 1, $max);
		$gbp['B'] = random_game_points($outcomeA, 0, $max);
		$gcp['A'] = random_game_points($outcomeA, 0, $max);
		$gcp['B'] = random_game_points($outcomeA, 1, $max);
		$gdp['A'] = random_game_points($outcomeA, 1, $max);
		$gdp['B'] = random_game_points($outcomeA, 0, $max);
	else
		$gap['A'] = random_game_points($outcomeA, 1, $max);
		$gap['B'] = random_game_points($outcomeA, 0, $max);
		$gbp['A'] = random_game_points($outcomeA, 1, $max);
		$gbp['B'] = random_game_points($outcomeA, 0, $max);
		$gcp['A'] = random_game_points($outcomeA, 0, $max);
		$gcp['B'] = random_game_points($outcomeA, 1, $max);
		$gdp['A'] = random_game_points($outcomeA, 0, $max);
		$gdp['B'] = random_game_points($outcomeA, 1, $max);
		$gep['A'] = random_game_points($outcomeA, 1, $max);
		$gep['B'] = random_game_points($outcomeA, 0, $max);
	endif;




























//ctrl + shift + p -> type -> tidy
//ctrl + alt + t
//"Project" -> "Add Folder to Project..."
//r_meta
//Packages/User/Package Control.sublime-settings
//Packages/User/Preferences.sublime-settings
//C:\temp\lg\www\brank\wp-content\plugins\SportsPress\includes\admin\post-types\meta-boxes\class-sp-meta-box-player-statistics.php
update_post_meta( $player_id, 'sp_rank_history', array(
			'from' => null,
			'to' => null,
			'position' => 12,
			'previous_position' => 11,
			'rankId' => null,
			'player_other_ranks' => array(array('rank_id'=>'', 'position'=>''))
			'direction' => null, //up,down,still
			'is_history_top'=> false,
			'is_history_bottom' => false,
			'is_position_longest' => false,
			'position_previous_players'=> array('player_id'=>32,'player_id'=>43),
			'same_position_players'=> array('player_id'=>11),
		));